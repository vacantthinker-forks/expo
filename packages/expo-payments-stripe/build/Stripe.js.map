{"version":3,"file":"Stripe.js","sourceRoot":"","sources":["../src/Stripe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAC3E,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,SAAS,MAAM,mBAAmB,CAAC;AAC1C,OAAO,YAAY,MAAM,sBAAsB,CAAC;AAEhD,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AAEjD,MAAM,EAAE,YAAY,EAAE,GAAG,kBAAkB,CAAC;AAE5C,OAAO,CAAC,IAAI,CACV,2SAA2S,CAC5S,CAAC;AAEF,SAAS,SAAS,CAAC,QAAgB;IACjC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;QAC/B,MAAM,IAAI,KAAK,CACb,oFAAoF,CACrF,CAAC;KACH;AACH,CAAC;AAED,MAAM,MAAM;IAAZ;QACE,sBAAiB,GAAG,KAAK,CAAC;QAE1B,oBAAe,GAAG,CAAC,OAA4B,EAAE,EAAE;YACjD,SAAS,CAAC,UAAU,CAAC,0BAA0B,EAAE,OAAO,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC;YAE1F,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAE9B,OAAO,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,gDAAgD;QAChD,kCAA6B,GAAG,GAAqB,EAAE,CAAC,YAAY,CAAC,wBAAwB,EAAE,CAAC;QAEhG,gDAAgD;QAChD,gCAA2B,GAAG,GAAqB,EAAE,CAAC,YAAY,CAAC,sBAAsB,EAAE,CAAC;QAE5F,iCAA4B,GAAG,GAAG,EAAE,CAClC,QAAQ,CAAC,MAAM,CAAC;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,2BAA2B,EAAE;YAC7C,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,6BAA6B,EAAE;YACnD,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;SACtC,CAAC,EAAE,CAAC;QAEP,iDAAiD;QACjD,iCAA4B,GAAG,CAC7B,UAAgD,EAAE,EAChC,EAAE;YACpB,SAAS,CACP,UAAU,CAAC,uCAAuC,EAClD,OAAO,EACP,SAAS,EACT,gCAAgC,CACjC,CAAC;YACF,OAAO,YAAY,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC;QAEF,iDAAiD;QACjD,mCAA8B,GAAG,GAAqB,EAAE,CAAC,YAAY,CAAC,yBAAyB,EAAE,CAAC;QAElG,6DAA6D;QAC7D,kCAA6B,GAAG,CAAC,UAAgD,EAAE,EAAE,EAAE,CACrF,QAAQ,CAAC,MAAM,CAAC;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC;YACrD,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,8BAA8B,EAAE;YACpD,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;SACtC,CAAC,EAAE,CAAC;QAEP,oDAAoD;QACpD,sCAAiC,GAAG,CAClC,OAAkD,EACrB,EAAE;YAC/B,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,SAAS,CACP,UAAU,CAAC,4CAA4C,EACvD,OAAO,EACP,SAAS,EACT,qCAAqC,CACtC,CAAC;YACF,OAAO,YAAY,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;QAC5D,CAAC,CAAC;QAEF,oDAAoD;QACpD,oCAA+B,GAAG,CAChC,KAA6C,EAC7C,OAAgD,EACrB,EAAE;YAC7B,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,SAAS,CACP,UAAU,CAAC,wCAAwC,EACnD,EAAE,KAAK,EAAE,EACT,OAAO,EACP,mCAAmC,CACpC,CAAC;YACF,SAAS,CACP,UAAU,CAAC,0CAA0C,EACrD,OAAO,EACP,SAAS,EACT,mCAAmC,CACpC,CAAC;YACF,OAAO,YAAY,CAAC,0BAA0B,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACjE,CAAC,CAAC;QA0BF,+CAA+C;QAC/C,iCAA4B,GAAG,GAAkB,EAAE;YACjD,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,OAAO,YAAY,CAAC,uBAAuB,EAAE,CAAC;QAChD,CAAC,CAAC;QAEF,uCAAuC;QACvC,kCAA6B,GAAG,GAAG,EAAE,CACnC,QAAQ,CAAC,MAAM,CAAC;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,4BAA4B,EAAE;YAC9C,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE;SACjC,CAAC,EAAE,CAAC;QAEP,+CAA+C;QAC/C,+BAA0B,GAAG,GAAkB,EAAE;YAC/C,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,OAAO,YAAY,CAAC,qBAAqB,EAAE,CAAC;QAC9C,CAAC,CAAC;QAEF,uCAAuC;QACvC,gCAA2B,GAAG,GAAG,EAAE,CACjC,QAAQ,CAAC,MAAM,CAAC;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,0BAA0B,EAAE;YAC5C,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE;SACjC,CAAC,EAAE,CAAC;QAEP,2CAA2C;QAC3C,2BAAsB,GAAG,GAAkB,EAAE,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC;QAE/E,uCAAuC;QACvC,4BAAuB,GAAG,GAAG,EAAE,CAC7B,QAAQ,CAAC,MAAM,CAAC;YACd,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE;YACxC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE;SACjC,CAAC,EAAE,CAAC;QAEP,oCAA+B,GAAG,CAChC,UAAmD,EAAE,EACL,EAAE;YAClD,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,SAAS,CACP,UAAU,CAAC,0CAA0C,EACrD,OAAO,EACP,SAAS,EACT,mCAAmC,CACpC,CAAC;YACF,OAAO,YAAY,CAAC,0BAA0B,CAAC;gBAC7C,GAAG,OAAO;gBACV,KAAK,EAAE,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;aACnC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,6BAAwB,GAAG,CACzB,MAAwC,EACQ,EAAE;YAClD,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,SAAS,CACP,UAAU,CAAC,kCAAkC,EAC7C,MAAM,EACN,QAAQ,EACR,4BAA4B,CAC7B,CAAC;YACF,OAAO,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC,CAAC;QAEF,oCAA+B,GAAG,CAChC,MAAM,GAAG,EAAE,EACqC,EAAE;YAClD,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,SAAS,CACP,UAAU,CAAC,yCAAyC,EACpD,MAAM,EACN,QAAQ,EACR,mCAAmC,CACpC,CAAC;YACF,OAAO,YAAY,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QACzD,CAAC,CAAC;QAEF,gCAA2B,GAAG,CAC5B,MAA2C,EACpB,EAAE;YACzB,SAAS,CAAC,IAAI,CAAC,CAAC;YAChB,SAAS,CACP,UAAU,CAAC,8BAA8B,EACzC,MAAM,EACN,QAAQ,EACR,+BAA+B,CAChC,CAAC;YACF,OAAO,YAAY,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC,CAAC;IACJ,CAAC;IAlHC,gCAAgC,CAC9B,OAA4F,EAC5F,QAAgD,EAAE;QAElD,MAAM,qBAAqB,GAAG,QAAQ,CAAC,MAAM,CAE3C;YACA,GAAG,EAAE,GAAG,EAAE,CACR,IAAI,CAAC,+BAA+B,CAClC,KAAK,EACL,OAAkD,CACnD;YACH,OAAO,EAAE,GAAG,EAAE,CACZ,IAAI,CAAC,iCAAiC,CACpC,OAAoD,CACrD;YACH,OAAO,EAAE,GAAG,EAAE,CACZ,OAAO,CAAC,MAAM,CACZ,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,kCAAkC,CAAC,CACpF;SACJ,CAAC,CAAC;QACH,OAAO,qBAAqB,EAAE,CAAC;IACjC,CAAC;CA4FF;AAED,eAAe,IAAI,MAAM,EAAE,CAAC","sourcesContent":["import { NativeModulesProxy, UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport errorCodes from './errorCodes';\nimport checkArgs from './utils/checkArgs';\nimport processTheme from './utils/processTheme';\nimport * as types from './utils/types';\nimport * as validators from './utils/validators';\n\nconst { StripeModule } = NativeModulesProxy;\n\nconsole.warn(\n  '`expo-payments-stripe` has been deprecated in favor of `@stripe/stripe-react-native`. For more information on the new library, and how to migrate away from `expo-payments-stripe`, please refer to https://docs.expo.io/versions/latest/sdk/stripe/. This package will no longer be available in SDK 43.'\n);\n\nfunction checkInit(instance: Stripe) {\n  if (!instance.stripeInitialized) {\n    throw new Error(\n      `You should call init first.\\nRead more https://github.com/tipsi/tipsi-stripe#usage`\n    );\n  }\n}\n\nclass Stripe {\n  stripeInitialized = false;\n\n  setOptionsAsync = (options: types.StripeOptions) => {\n    checkArgs(validators.setOptionsOptionsPropTypes, options, 'options', 'Stripe.setOptions');\n\n    this.stripeInitialized = true;\n\n    return StripeModule.init(options, errorCodes);\n  };\n\n  /** @deprecated use `deviceSupportsNativePay` */\n  deviceSupportsAndroidPayAsync = (): Promise<boolean> => StripeModule.deviceSupportsAndroidPay();\n\n  /** @deprecated use `deviceSupportsNativePay` */\n  deviceSupportsApplePayAsync = (): Promise<boolean> => StripeModule.deviceSupportsApplePay();\n\n  deviceSupportsNativePayAsync = () =>\n    Platform.select({\n      ios: () => this.deviceSupportsApplePayAsync(),\n      android: () => this.deviceSupportsAndroidPayAsync(),\n      default: () => Promise.resolve(false),\n    })();\n\n  /** @deprecated use `canMakeNativePayPayments` */\n  canMakeApplePayPaymentsAsync = (\n    options: types.CanMakeApplePayPaymentsOptions = {}\n  ): Promise<boolean> => {\n    checkArgs(\n      validators.canMakeApplePayPaymentsOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.canMakeApplePayPayments'\n    );\n    return StripeModule.canMakeApplePayPayments(options);\n  };\n\n  /** @deprecated use `canMakeNativePayPayments` */\n  canMakeAndroidPayPaymentsAsync = (): Promise<boolean> => StripeModule.canMakeAndroidPayPayments();\n\n  // iOS requires networks array while Android requires nothing\n  canMakeNativePayPaymentsAsync = (options: types.CanMakeApplePayPaymentsOptions = {}) =>\n    Platform.select({\n      ios: () => this.canMakeApplePayPaymentsAsync(options),\n      android: () => this.canMakeAndroidPayPaymentsAsync(),\n      default: () => Promise.resolve(false),\n    })();\n\n  /** @deprecated use `paymentRequestWithNativePay` */\n  paymentRequestWithAndroidPayAsync = (\n    options: types.PaymentRequestWithAndroidPayOptions\n  ): Promise<types.AndroidToken> => {\n    checkInit(this);\n    checkArgs(\n      validators.paymentRequestWithAndroidPayOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.paymentRequestWithAndroidPay'\n    );\n    return StripeModule.paymentRequestWithAndroidPay(options);\n  };\n\n  /** @deprecated use `paymentRequestWithNativePay` */\n  paymentRequestWithApplePayAsync = (\n    items: types.PaymentRequestWithApplePayItem[],\n    options: types.PaymentRequestWithApplePayOptions\n  ): Promise<types.AppleToken> => {\n    checkInit(this);\n    checkArgs(\n      validators.paymentRequestWithApplePayItemsPropTypes,\n      { items },\n      'items',\n      'Stripe.paymentRequestWithApplePay'\n    );\n    checkArgs(\n      validators.paymentRequestWithApplePayOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.paymentRequestWithApplePay'\n    );\n    return StripeModule.paymentRequestWithApplePay(items, options);\n  };\n\n  paymentRequestWithNativePayAsync(\n    options: types.PaymentRequestWithApplePayOptions | types.PaymentRequestWithAndroidPayOptions,\n    items: types.PaymentRequestWithApplePayItem[] = []\n  ) {\n    const nativePaymentFunction = Platform.select<\n      () => Promise<types.AppleToken | types.AndroidToken>\n    >({\n      ios: () =>\n        this.paymentRequestWithApplePayAsync(\n          items,\n          options as types.PaymentRequestWithApplePayOptions\n        ),\n      android: () =>\n        this.paymentRequestWithAndroidPayAsync(\n          options as types.PaymentRequestWithAndroidPayOptions\n        ),\n      default: () =>\n        Promise.reject(\n          new UnavailabilityError('expo-payments-stripe', 'paymentRequestWithNativePayAsync')\n        ),\n    });\n    return nativePaymentFunction();\n  }\n\n  /** @deprecated use completeNativePayRequest */\n  completeApplePayRequestAsync = (): Promise<void> => {\n    checkInit(this);\n    return StripeModule.completeApplePayRequest();\n  };\n\n  // no corresponding android impl exists\n  completeNativePayRequestAsync = () =>\n    Platform.select({\n      ios: () => this.completeApplePayRequestAsync(),\n      default: () => Promise.resolve(),\n    })();\n\n  /** @deprecated use `cancelNativePayRequest` */\n  cancelApplePayRequestAsync = (): Promise<void> => {\n    checkInit(this);\n    return StripeModule.cancelApplePayRequest();\n  };\n\n  // no corresponding android impl exists\n  cancelNativePayRequestAsync = () =>\n    Platform.select({\n      ios: () => this.cancelApplePayRequestAsync(),\n      default: () => Promise.resolve(),\n    })();\n\n  /** @deprecated use `openNativePaySetup` */\n  openApplePaySetupAsync = (): Promise<void> => StripeModule.openApplePaySetup();\n\n  // no corresponding android impl exists\n  openNativePaySetupAsync = () =>\n    Platform.select({\n      ios: () => this.openApplePaySetupAsync(),\n      default: () => Promise.resolve(),\n    })();\n\n  paymentRequestWithCardFormAsync = (\n    options: types.PaymentRequestWithCardFormOptions = {}\n  ): Promise<types.AndroidToken | types.AppleToken> => {\n    checkInit(this);\n    checkArgs(\n      validators.paymentRequestWithCardFormOptionsPropTypes,\n      options,\n      'options',\n      'Stripe.paymentRequestWithCardForm'\n    );\n    return StripeModule.paymentRequestWithCardForm({\n      ...options,\n      theme: processTheme(options.theme),\n    });\n  };\n\n  createTokenWithCardAsync = (\n    params: types.CreateTokenWithCardOptions\n  ): Promise<types.AndroidToken | types.AppleToken> => {\n    checkInit(this);\n    checkArgs(\n      validators.createTokenWithCardParamsPropTypes,\n      params,\n      'params',\n      'Stripe.createTokenWithCard'\n    );\n    return StripeModule.createTokenWithCard(params);\n  };\n\n  createTokenWithBankAccountAsync = (\n    params = {}\n  ): Promise<types.AndroidToken | types.AppleToken> => {\n    checkInit(this);\n    checkArgs(\n      validators.createTokenWithBankAccountParamsPropTypes,\n      params,\n      'params',\n      'Stripe.createTokenWithBankAccount'\n    );\n    return StripeModule.createTokenWithBankAccount(params);\n  };\n\n  createSourceWithParamsAsync = (\n    params: types.CreateSourceWithParamsOptions\n  ): Promise<types.Source> => {\n    checkInit(this);\n    checkArgs(\n      validators.createSourceWithParamsPropType,\n      params,\n      'params',\n      'Stripe.createSourceWithParams'\n    );\n    return StripeModule.createSourceWithParams(params);\n  };\n}\n\nexport default new Stripe();\n"]}